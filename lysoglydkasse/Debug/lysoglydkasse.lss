
lysoglydkasse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000062a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  0000062a  000006be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000f6  008000f6  00000754  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b2f  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000772  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000412  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f7  00000000  00000000  000028f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002aed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	74 c1       	rjmp	.+744    	; 0x2f6 <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	0a c1       	rjmp	.+532    	; 0x22c <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea e2       	ldi	r30, 0x2A	; 42
  36:	f6 e0       	ldi	r31, 0x06	; 6
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a6 3f       	cpi	r26, 0xF6	; 246
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a6 ef       	ldi	r26, 0xF6	; 246
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	af 3f       	cpi	r26, 0xFF	; 255
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	77 d1       	rcall	.+750    	; 0x344 <main>
  56:	e7 c2       	rjmp	.+1486   	; 0x626 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <setup_lys>:

#include <avr/io.h>

void setup_lys()
{	
	DDRB |= (1<<PINB0)|(1<<PINB1);
  5a:	87 b3       	in	r24, 0x17	; 23
  5c:	83 60       	ori	r24, 0x03	; 3
  5e:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<PINB0)|(1<<PINB1));
  60:	88 b3       	in	r24, 0x18	; 24
  62:	8c 7f       	andi	r24, 0xFC	; 252
  64:	88 bb       	out	0x18, r24	; 24
  66:	08 95       	ret

00000068 <on_red>:
//
// Skru av/på lys
//
void on_red()
{
	PORTB |= (1<<PINB0);
  68:	c0 9a       	sbi	0x18, 0	; 24
  6a:	08 95       	ret

0000006c <off_red>:
}

void off_red()
{
	PORTB &= ~(1<<PINB0);
  6c:	c0 98       	cbi	0x18, 0	; 24
  6e:	08 95       	ret

00000070 <on_green>:
}

void on_green()
{
	PORTB |= (1<<PINB1);
  70:	c1 9a       	sbi	0x18, 1	; 24
  72:	08 95       	ret

00000074 <off_green>:
}

void off_green()
{
	PORTB &= ~(1<<PINB1);
  74:	c1 98       	cbi	0x18, 1	; 24
  76:	08 95       	ret

00000078 <setup_meter>:

#include <avr/io.h>

void setup_meter()
{
	DDRB |= (1<<PINB2);		// Meter pin
  78:	ba 9a       	sbi	0x17, 2	; 23
	TCCR0A |= (1<<COM0A1) | (1<<COM0A0) | (1<<WGM00) | (1<<WGM01);	// Pin mode, Fast PWM
  7a:	80 b7       	in	r24, 0x30	; 48
  7c:	83 6c       	ori	r24, 0xC3	; 195
  7e:	80 bf       	out	0x30, r24	; 48
	TCCR0B |= (1<<CS01) | (1<<CS00);								// Clock Source
  80:	83 b7       	in	r24, 0x33	; 51
  82:	83 60       	ori	r24, 0x03	; 3
  84:	83 bf       	out	0x33, r24	; 51
	TCCR0B &= ~((1<<WGM02) | (1<<FOC0A) | (1<<FOC0B) | (1<<CS02));
  86:	83 b7       	in	r24, 0x33	; 51
  88:	83 73       	andi	r24, 0x33	; 51
  8a:	83 bf       	out	0x33, r24	; 51
  8c:	08 95       	ret

0000008e <setMeter>:
//
// Flytt nåla til posisjon (0-100)
//
void setMeter(uint16_t x)
{
	OCR0A = x*255/100;
  8e:	9c 01       	movw	r18, r24
  90:	22 95       	swap	r18
  92:	32 95       	swap	r19
  94:	30 7f       	andi	r19, 0xF0	; 240
  96:	32 27       	eor	r19, r18
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	32 27       	eor	r19, r18
  9c:	a9 01       	movw	r20, r18
  9e:	48 1b       	sub	r20, r24
  a0:	59 0b       	sbc	r21, r25
  a2:	ca 01       	movw	r24, r20
  a4:	9a 01       	movw	r18, r20
  a6:	22 95       	swap	r18
  a8:	32 95       	swap	r19
  aa:	30 7f       	andi	r19, 0xF0	; 240
  ac:	32 27       	eor	r19, r18
  ae:	20 7f       	andi	r18, 0xF0	; 240
  b0:	32 27       	eor	r19, r18
  b2:	82 0f       	add	r24, r18
  b4:	93 1f       	adc	r25, r19
  b6:	64 e6       	ldi	r22, 0x64	; 100
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	7e d1       	rcall	.+764    	; 0x3b8 <__udivmodhi4>
  bc:	66 bf       	out	0x36, r22	; 54
  be:	08 95       	ret

000000c0 <setup_musikk>:
volatile uint16_t cnt;
volatile uint8_t wit;

void setup_musikk()
{
	setup_lyd();
  c0:	e1 d0       	rcall	.+450    	; 0x284 <setup_lyd>
	cli();
  c2:	f8 94       	cli
	TCCR0A |= (1<<WGM00) | (1<<WGM01);	// Fast PWM
  c4:	80 b7       	in	r24, 0x30	; 48
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	80 bf       	out	0x30, r24	; 48
	TCCR0B |= (1<<CS01) | (1<<CS00);	// Clock Source
  ca:	83 b7       	in	r24, 0x33	; 51
  cc:	83 60       	ori	r24, 0x03	; 3
  ce:	83 bf       	out	0x33, r24	; 51
	TCCR0B &= ~((1<<WGM02) | (1<<FOC0A) | (1<<FOC0B) | (1<<CS02));
  d0:	83 b7       	in	r24, 0x33	; 51
  d2:	83 73       	andi	r24, 0x33	; 51
  d4:	83 bf       	out	0x33, r24	; 51
	TIMSK0 |= (1<<TOV0);				// Enable Imterrupts
  d6:	89 b7       	in	r24, 0x39	; 57
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	89 bf       	out	0x39, r24	; 57
	playerstep = 0;
  dc:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <playerstep>
	playing = 0;
  e0:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <playing>
	sei();
  e4:	78 94       	sei
  e6:	08 95       	ret

000000e8 <restartMusikk>:
//
// Starter spilleren fra starten av melodi
//
void restartMusikk()
{
	cli();
  e8:	f8 94       	cli
	ptr = 0;
  ea:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <ptr+0x1>
  ee:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <ptr>
	cnt = 0;
  f2:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__data_end+0x1>
  f6:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__data_end>
	wit = 0;
  fa:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <wit>
	playing = 0xFF;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <playing>
	sei();
 104:	78 94       	sei
 106:	08 95       	ret

00000108 <playertikk>:
}

void playertikk()  // Kalles hver ~60Hz
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
	while(playing & (cnt++ >= wit))		// Spiller vi? Er vi klar til neste event?
 10c:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <playing>
 110:	40 91 f6 00 	lds	r20, 0x00F6	; 0x8000f6 <__data_end>
 114:	50 91 f7 00 	lds	r21, 0x00F7	; 0x8000f7 <__data_end+0x1>
 118:	9a 01       	movw	r18, r20
 11a:	2f 5f       	subi	r18, 0xFF	; 255
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
 11e:	30 93 f7 00 	sts	0x00F7, r19	; 0x8000f7 <__data_end+0x1>
 122:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__data_end>
 126:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <wit>
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	42 17       	cp	r20, r18
 132:	53 07       	cpc	r21, r19
 134:	10 f4       	brcc	.+4      	; 0x13a <playertikk+0x32>
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	89 2f       	mov	r24, r25
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	86 23       	and	r24, r22
 140:	97 23       	and	r25, r23
 142:	89 2b       	or	r24, r25
 144:	09 f4       	brne	.+2      	; 0x148 <playertikk+0x40>
 146:	6f c0       	rjmp	.+222    	; 0x226 <__stack+0xc7>
 148:	d1 e0       	ldi	r29, 0x01	; 1
 14a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if(melodi[ptr] == 0x80)			// tolk og utfør event
 14c:	e0 91 f8 00 	lds	r30, 0x00F8	; 0x8000f8 <ptr>
 150:	f0 91 f9 00 	lds	r31, 0x00F9	; 0x8000f9 <ptr+0x1>
 154:	ec 59       	subi	r30, 0x9C	; 156
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 81       	ld	r24, Z
 15a:	80 38       	cpi	r24, 0x80	; 128
 15c:	59 f4       	brne	.+22     	; 0x174 <__stack+0x15>
		{
			stopTone();
 15e:	c8 d0       	rcall	.+400    	; 0x2f0 <stopTone>
			ptr++;
 160:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <ptr>
 164:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <ptr+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <ptr+0x1>
 16e:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <ptr>
 172:	26 c0       	rjmp	.+76     	; 0x1c0 <__stack+0x61>
		}
		else if(melodi[ptr] == 0xFF)
 174:	e0 91 f8 00 	lds	r30, 0x00F8	; 0x8000f8 <ptr>
 178:	f0 91 f9 00 	lds	r31, 0x00F9	; 0x8000f9 <ptr+0x1>
 17c:	ec 59       	subi	r30, 0x9C	; 156
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	80 81       	ld	r24, Z
 182:	8f 3f       	cpi	r24, 0xFF	; 255
 184:	21 f4       	brne	.+8      	; 0x18e <__stack+0x2f>
		{
			stopTone();
 186:	b4 d0       	rcall	.+360    	; 0x2f0 <stopTone>
			playing = 0;
 188:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <playing>
			break;
 18c:	4c c0       	rjmp	.+152    	; 0x226 <__stack+0xc7>
		}
		else
		{
			playTone(melodi[ptr], melodi[ptr+1]);
 18e:	a0 91 f8 00 	lds	r26, 0x00F8	; 0x8000f8 <ptr>
 192:	b0 91 f9 00 	lds	r27, 0x00F9	; 0x8000f9 <ptr+0x1>
 196:	e0 91 f8 00 	lds	r30, 0x00F8	; 0x8000f8 <ptr>
 19a:	f0 91 f9 00 	lds	r31, 0x00F9	; 0x8000f9 <ptr+0x1>
 19e:	ac 59       	subi	r26, 0x9C	; 156
 1a0:	bf 4f       	sbci	r27, 0xFF	; 255
 1a2:	ec 59       	subi	r30, 0x9C	; 156
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	11 96       	adiw	r26, 0x01	; 1
 1a8:	6c 91       	ld	r22, X
 1aa:	80 81       	ld	r24, Z
 1ac:	83 d0       	rcall	.+262    	; 0x2b4 <playTone>
			ptr = ptr+2;
 1ae:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <ptr>
 1b2:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <ptr+0x1>
 1b6:	02 96       	adiw	r24, 0x02	; 2
 1b8:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <ptr+0x1>
 1bc:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <ptr>
		}
		wit = melodi[ptr++];		// Ferdig utført, pek videre til neste event
 1c0:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <ptr>
 1c4:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <ptr+0x1>
 1c8:	9c 01       	movw	r18, r24
 1ca:	2f 5f       	subi	r18, 0xFF	; 255
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
 1ce:	30 93 f9 00 	sts	0x00F9, r19	; 0x8000f9 <ptr+0x1>
 1d2:	20 93 f8 00 	sts	0x00F8, r18	; 0x8000f8 <ptr>
 1d6:	fc 01       	movw	r30, r24
 1d8:	ec 59       	subi	r30, 0x9C	; 156
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	80 81       	ld	r24, Z
 1de:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <wit>
		cnt = 0;
 1e2:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__data_end+0x1>
 1e6:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__data_end>
	sei();
}

void playertikk()  // Kalles hver ~60Hz
{
	while(playing & (cnt++ >= wit))		// Spiller vi? Er vi klar til neste event?
 1ea:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <playing>
 1ee:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <__data_end>
 1f2:	70 91 f7 00 	lds	r23, 0x00F7	; 0x8000f7 <__data_end+0x1>
 1f6:	9b 01       	movw	r18, r22
 1f8:	2f 5f       	subi	r18, 0xFF	; 255
 1fa:	3f 4f       	sbci	r19, 0xFF	; 255
 1fc:	30 93 f7 00 	sts	0x00F7, r19	; 0x8000f7 <__data_end+0x1>
 200:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__data_end>
 204:	40 91 fc 00 	lds	r20, 0x00FC	; 0x8000fc <wit>
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	2d 2f       	mov	r18, r29
 20c:	3c 2f       	mov	r19, r28
 20e:	64 17       	cp	r22, r20
 210:	75 07       	cpc	r23, r21
 212:	10 f4       	brcc	.+4      	; 0x218 <__stack+0xb9>
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	89 2f       	mov	r24, r25
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	82 23       	and	r24, r18
 21e:	93 23       	and	r25, r19
 220:	89 2b       	or	r24, r25
 222:	09 f0       	breq	.+2      	; 0x226 <__stack+0xc7>
 224:	93 cf       	rjmp	.-218    	; 0x14c <playertikk+0x44>
			ptr = ptr+2;
		}
		wit = melodi[ptr++];		// Ferdig utført, pek videre til neste event
		cnt = 0;
	}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <__vector_11>:
	sei();
}


ISR(TIM0_OVF_vect)  // Trigges ~240Hz
{
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	2f 93       	push	r18
 238:	3f 93       	push	r19
 23a:	4f 93       	push	r20
 23c:	5f 93       	push	r21
 23e:	6f 93       	push	r22
 240:	7f 93       	push	r23
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	af 93       	push	r26
 248:	bf 93       	push	r27
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
	sei();
 24e:	78 94       	sei
	if(!((playerstep++)&0x03))
 250:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <playerstep>
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	98 0f       	add	r25, r24
 258:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <playerstep>
 25c:	83 70       	andi	r24, 0x03	; 3
 25e:	09 f4       	brne	.+2      	; 0x262 <__vector_11+0x36>
	{
		playertikk();
 260:	53 df       	rcall	.-346    	; 0x108 <playertikk>
	}
	
}
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	7f 91       	pop	r23
 270:	6f 91       	pop	r22
 272:	5f 91       	pop	r21
 274:	4f 91       	pop	r20
 276:	3f 91       	pop	r19
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <setup_lyd>:
//
const uint_fast16_t scale[] = {61156, 57724, 54484, 51426, 48540, 45815, 43244, 40817, 38526, 36364, 34323, 32396};

void setup_lyd()
{
	cli();
 284:	f8 94       	cli
	DDRA |= (1<<PINA7);						// Output pin for speaker (for software timer)
 286:	d7 9a       	sbi	0x1a, 7	; 26
	TCCR1A &= ~((1<<WGM11) | (1<<WGM10));	// Clear on Compare mode
 288:	8f b5       	in	r24, 0x2f	; 47
 28a:	8c 7f       	andi	r24, 0xFC	; 252
 28c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11) | (1<<WGM12);		// Prescaler
 28e:	8e b5       	in	r24, 0x2e	; 46
 290:	8a 60       	ori	r24, 0x0A	; 10
 292:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1<<WGM13));
 294:	8e b5       	in	r24, 0x2e	; 46
 296:	8f 7e       	andi	r24, 0xEF	; 239
 298:	8e bd       	out	0x2e, r24	; 46
	TIMSK1 |= (1<<OCIE1A);					// Enable interrupts
 29a:	61 9a       	sbi	0x0c, 1	; 12

	TCNT1 = 0;								//Preset all Values
 29c:	1d bc       	out	0x2d, r1	; 45
 29e:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 0xFFFF;
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	9f ef       	ldi	r25, 0xFF	; 255
 2a4:	9b bd       	out	0x2b, r25	; 43
 2a6:	8a bd       	out	0x2a, r24	; 42
	soundstep = 0;
 2a8:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <soundstep>
	play = 0;
 2ac:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <play>
	sei();	
 2b0:	78 94       	sei
 2b2:	08 95       	ret

000002b4 <playTone>:

//
// Spill en tone
//
void playTone(uint8_t tone, uint8_t oktav)
{
 2b4:	26 2f       	mov	r18, r22
	cli();
 2b6:	f8 94       	cli
	OCR1A = scale[tone%12]>>(oktav%10);
 2b8:	6c e0       	ldi	r22, 0x0C	; 12
 2ba:	72 d0       	rcall	.+228    	; 0x3a0 <__udivmodqi4>
 2bc:	e9 2f       	mov	r30, r25
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	ee 0f       	add	r30, r30
 2c2:	ff 1f       	adc	r31, r31
 2c4:	e3 52       	subi	r30, 0x23	; 35
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	82 2f       	mov	r24, r18
 2ca:	6a e0       	ldi	r22, 0x0A	; 10
 2cc:	69 d0       	rcall	.+210    	; 0x3a0 <__udivmodqi4>
 2ce:	29 2f       	mov	r18, r25
 2d0:	80 81       	ld	r24, Z
 2d2:	91 81       	ldd	r25, Z+1	; 0x01
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <playTone+0x26>
 2d6:	96 95       	lsr	r25
 2d8:	87 95       	ror	r24
 2da:	2a 95       	dec	r18
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <playTone+0x22>
 2de:	9b bd       	out	0x2b, r25	; 43
 2e0:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
 2e2:	1d bc       	out	0x2d, r1	; 45
 2e4:	1c bc       	out	0x2c, r1	; 44
	play = 0xFF;
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <play>
	sei();
 2ec:	78 94       	sei
 2ee:	08 95       	ret

000002f0 <stopTone>:
//
// Stopp spillende tone
//
void stopTone()
{
	play = 0x00;
 2f0:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <play>
 2f4:	08 95       	ret

000002f6 <__vector_6>:

//
// Software-toggle av høytaler
//
ISR(TIM1_COMPA_vect)
{
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
	if(play)
 304:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <play>
 308:	88 23       	and	r24, r24
 30a:	61 f0       	breq	.+24     	; 0x324 <__vector_6+0x2e>
		PORTA |= (((soundstep++)&0x01)<<PINA7);
 30c:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <soundstep>
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	98 0f       	add	r25, r24
 314:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <soundstep>
 318:	9b b3       	in	r25, 0x1b	; 27
 31a:	87 95       	ror	r24
 31c:	88 27       	eor	r24, r24
 31e:	87 95       	ror	r24
 320:	89 2b       	or	r24, r25
 322:	8b bb       	out	0x1b, r24	; 27
	PORTA &= ~((soundstep&0x01)<<PINA7);
 324:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <soundstep>
 328:	9b b3       	in	r25, 0x1b	; 27
 32a:	87 95       	ror	r24
 32c:	88 27       	eor	r24, r24
 32e:	87 95       	ror	r24
 330:	80 95       	com	r24
 332:	89 23       	and	r24, r25
 334:	8b bb       	out	0x1b, r24	; 27
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <main>:
int main(void)
{
	//
	// Setup
	//
	setup_lys();
 344:	8a de       	rcall	.-748    	; 0x5a <setup_lys>
	setup_meter();
 346:	98 de       	rcall	.-720    	; 0x78 <setup_meter>
	setup_musikk();
 348:	bb de       	rcall	.-650    	; 0xc0 <setup_musikk>

// Potentiometer = A1 (ikke tilkoblet enda)
// SPI på ISP header (ikke i bruk enda)

int main(void)
{
 34a:	0f 2e       	mov	r0, r31
 34c:	fa e0       	ldi	r31, 0x0A	; 10
 34e:	ef 2e       	mov	r14, r31
 350:	f0 2d       	mov	r31, r0
 352:	f1 2c       	mov	r15, r1
    {
		for(int i=0; i<10; i++)
		{
			off_red();
			on_green();
			setMeter(rand()%100);
 354:	04 e6       	ldi	r16, 0x64	; 100
 356:	10 e0       	ldi	r17, 0x00	; 0

// Potentiometer = A1 (ikke tilkoblet enda)
// SPI på ISP header (ikke i bruk enda)

int main(void)
{
 358:	ce 2d       	mov	r28, r14
 35a:	df 2d       	mov	r29, r15
	//
    while (1) 
    {
		for(int i=0; i<10; i++)
		{
			off_red();
 35c:	87 de       	rcall	.-754    	; 0x6c <off_red>
			on_green();
 35e:	88 de       	rcall	.-752    	; 0x70 <on_green>
			setMeter(rand()%100);
 360:	93 d0       	rcall	.+294    	; 0x488 <rand>
 362:	b8 01       	movw	r22, r16
 364:	3d d0       	rcall	.+122    	; 0x3e0 <__divmodhi4>
 366:	93 de       	rcall	.-730    	; 0x8e <setMeter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	9f ef       	ldi	r25, 0xFF	; 255
 36a:	24 e3       	ldi	r18, 0x34	; 52
 36c:	8c e0       	ldi	r24, 0x0C	; 12
 36e:	91 50       	subi	r25, 0x01	; 1
 370:	20 40       	sbci	r18, 0x00	; 0
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	e1 f7       	brne	.-8      	; 0x36e <main+0x2a>
 376:	00 c0       	rjmp	.+0      	; 0x378 <main+0x34>
 378:	00 00       	nop
			_delay_ms(500);
			
			on_red();
 37a:	76 de       	rcall	.-788    	; 0x68 <on_red>
			off_green();
 37c:	7b de       	rcall	.-778    	; 0x74 <off_green>
			setMeter(rand()%100);
 37e:	84 d0       	rcall	.+264    	; 0x488 <rand>
 380:	b8 01       	movw	r22, r16
 382:	2e d0       	rcall	.+92     	; 0x3e0 <__divmodhi4>
 384:	84 de       	rcall	.-760    	; 0x8e <setMeter>
 386:	9f ef       	ldi	r25, 0xFF	; 255
 388:	24 e3       	ldi	r18, 0x34	; 52
 38a:	8c e0       	ldi	r24, 0x0C	; 12
 38c:	91 50       	subi	r25, 0x01	; 1
 38e:	20 40       	sbci	r18, 0x00	; 0
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <main+0x48>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x52>
 396:	00 00       	nop
 398:	21 97       	sbiw	r28, 0x01	; 1
	//
	// Do stuff
	//
    while (1) 
    {
		for(int i=0; i<10; i++)
 39a:	01 f7       	brne	.-64     	; 0x35c <main+0x18>
			on_red();
			off_green();
			setMeter(rand()%100);
			_delay_ms(500);
		}
		restartMusikk();
 39c:	a5 de       	rcall	.-694    	; 0xe8 <restartMusikk>
    }
 39e:	dc cf       	rjmp	.-72     	; 0x358 <main+0x14>

000003a0 <__udivmodqi4>:
 3a0:	99 1b       	sub	r25, r25
 3a2:	79 e0       	ldi	r23, 0x09	; 9
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <__udivmodqi4_ep>

000003a6 <__udivmodqi4_loop>:
 3a6:	99 1f       	adc	r25, r25
 3a8:	96 17       	cp	r25, r22
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <__udivmodqi4_ep>
 3ac:	96 1b       	sub	r25, r22

000003ae <__udivmodqi4_ep>:
 3ae:	88 1f       	adc	r24, r24
 3b0:	7a 95       	dec	r23
 3b2:	c9 f7       	brne	.-14     	; 0x3a6 <__udivmodqi4_loop>
 3b4:	80 95       	com	r24
 3b6:	08 95       	ret

000003b8 <__udivmodhi4>:
 3b8:	aa 1b       	sub	r26, r26
 3ba:	bb 1b       	sub	r27, r27
 3bc:	51 e1       	ldi	r21, 0x11	; 17
 3be:	07 c0       	rjmp	.+14     	; 0x3ce <__udivmodhi4_ep>

000003c0 <__udivmodhi4_loop>:
 3c0:	aa 1f       	adc	r26, r26
 3c2:	bb 1f       	adc	r27, r27
 3c4:	a6 17       	cp	r26, r22
 3c6:	b7 07       	cpc	r27, r23
 3c8:	10 f0       	brcs	.+4      	; 0x3ce <__udivmodhi4_ep>
 3ca:	a6 1b       	sub	r26, r22
 3cc:	b7 0b       	sbc	r27, r23

000003ce <__udivmodhi4_ep>:
 3ce:	88 1f       	adc	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	5a 95       	dec	r21
 3d4:	a9 f7       	brne	.-22     	; 0x3c0 <__udivmodhi4_loop>
 3d6:	80 95       	com	r24
 3d8:	90 95       	com	r25
 3da:	bc 01       	movw	r22, r24
 3dc:	cd 01       	movw	r24, r26
 3de:	08 95       	ret

000003e0 <__divmodhi4>:
 3e0:	97 fb       	bst	r25, 7
 3e2:	07 2e       	mov	r0, r23
 3e4:	16 f4       	brtc	.+4      	; 0x3ea <__divmodhi4+0xa>
 3e6:	00 94       	com	r0
 3e8:	06 d0       	rcall	.+12     	; 0x3f6 <__divmodhi4_neg1>
 3ea:	77 fd       	sbrc	r23, 7
 3ec:	08 d0       	rcall	.+16     	; 0x3fe <__divmodhi4_neg2>
 3ee:	e4 df       	rcall	.-56     	; 0x3b8 <__udivmodhi4>
 3f0:	07 fc       	sbrc	r0, 7
 3f2:	05 d0       	rcall	.+10     	; 0x3fe <__divmodhi4_neg2>
 3f4:	3e f4       	brtc	.+14     	; 0x404 <__divmodhi4_exit>

000003f6 <__divmodhi4_neg1>:
 3f6:	90 95       	com	r25
 3f8:	81 95       	neg	r24
 3fa:	9f 4f       	sbci	r25, 0xFF	; 255
 3fc:	08 95       	ret

000003fe <__divmodhi4_neg2>:
 3fe:	70 95       	com	r23
 400:	61 95       	neg	r22
 402:	7f 4f       	sbci	r23, 0xFF	; 255

00000404 <__divmodhi4_exit>:
 404:	08 95       	ret

00000406 <do_rand>:
 406:	a0 e0       	ldi	r26, 0x00	; 0
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	e8 e0       	ldi	r30, 0x08	; 8
 40c:	f2 e0       	ldi	r31, 0x02	; 2
 40e:	8a c0       	rjmp	.+276    	; 0x524 <__prologue_saves__+0xc>
 410:	ec 01       	movw	r28, r24
 412:	68 81       	ld	r22, Y
 414:	79 81       	ldd	r23, Y+1	; 0x01
 416:	8a 81       	ldd	r24, Y+2	; 0x02
 418:	9b 81       	ldd	r25, Y+3	; 0x03
 41a:	61 15       	cp	r22, r1
 41c:	71 05       	cpc	r23, r1
 41e:	81 05       	cpc	r24, r1
 420:	91 05       	cpc	r25, r1
 422:	21 f4       	brne	.+8      	; 0x42c <do_rand+0x26>
 424:	64 e2       	ldi	r22, 0x24	; 36
 426:	79 ed       	ldi	r23, 0xD9	; 217
 428:	8b e5       	ldi	r24, 0x5B	; 91
 42a:	97 e0       	ldi	r25, 0x07	; 7
 42c:	2d e1       	ldi	r18, 0x1D	; 29
 42e:	33 ef       	ldi	r19, 0xF3	; 243
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	38 d0       	rcall	.+112    	; 0x4a6 <__divmodsi4>
 436:	49 01       	movw	r8, r18
 438:	5a 01       	movw	r10, r20
 43a:	27 ea       	ldi	r18, 0xA7	; 167
 43c:	31 e4       	ldi	r19, 0x41	; 65
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	4d d0       	rcall	.+154    	; 0x4de <__mulsidi3>
 444:	69 01       	movw	r12, r18
 446:	7a 01       	movw	r14, r20
 448:	c5 01       	movw	r24, r10
 44a:	b4 01       	movw	r22, r8
 44c:	2c ee       	ldi	r18, 0xEC	; 236
 44e:	34 ef       	ldi	r19, 0xF4	; 244
 450:	4f ef       	ldi	r20, 0xFF	; 255
 452:	5f ef       	ldi	r21, 0xFF	; 255
 454:	44 d0       	rcall	.+136    	; 0x4de <__mulsidi3>
 456:	02 2f       	mov	r16, r18
 458:	13 2f       	mov	r17, r19
 45a:	9a 01       	movw	r18, r20
 45c:	d7 01       	movw	r26, r14
 45e:	c6 01       	movw	r24, r12
 460:	80 0f       	add	r24, r16
 462:	91 1f       	adc	r25, r17
 464:	a2 1f       	adc	r26, r18
 466:	b3 1f       	adc	r27, r19
 468:	b7 ff       	sbrs	r27, 7
 46a:	03 c0       	rjmp	.+6      	; 0x472 <do_rand+0x6c>
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	a1 09       	sbc	r26, r1
 470:	b0 48       	sbci	r27, 0x80	; 128
 472:	88 83       	st	Y, r24
 474:	99 83       	std	Y+1, r25	; 0x01
 476:	aa 83       	std	Y+2, r26	; 0x02
 478:	bb 83       	std	Y+3, r27	; 0x03
 47a:	9f 77       	andi	r25, 0x7F	; 127
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	ec e0       	ldi	r30, 0x0C	; 12
 482:	6c c0       	rjmp	.+216    	; 0x55c <__epilogue_restores__+0xc>

00000484 <rand_r>:
 484:	c0 df       	rcall	.-128    	; 0x406 <do_rand>
 486:	08 95       	ret

00000488 <rand>:
 488:	80 e6       	ldi	r24, 0x60	; 96
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	bc df       	rcall	.-136    	; 0x406 <do_rand>
 48e:	08 95       	ret

00000490 <srand>:
 490:	a0 e0       	ldi	r26, 0x00	; 0
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 498:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 49c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 4a0:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 4a4:	08 95       	ret

000004a6 <__divmodsi4>:
 4a6:	05 2e       	mov	r0, r21
 4a8:	97 fb       	bst	r25, 7
 4aa:	16 f4       	brtc	.+4      	; 0x4b0 <__divmodsi4+0xa>
 4ac:	00 94       	com	r0
 4ae:	0f d0       	rcall	.+30     	; 0x4ce <__negsi2>
 4b0:	57 fd       	sbrc	r21, 7
 4b2:	05 d0       	rcall	.+10     	; 0x4be <__divmodsi4_neg2>
 4b4:	68 d0       	rcall	.+208    	; 0x586 <__udivmodsi4>
 4b6:	07 fc       	sbrc	r0, 7
 4b8:	02 d0       	rcall	.+4      	; 0x4be <__divmodsi4_neg2>
 4ba:	46 f4       	brtc	.+16     	; 0x4cc <__divmodsi4_exit>
 4bc:	08 c0       	rjmp	.+16     	; 0x4ce <__negsi2>

000004be <__divmodsi4_neg2>:
 4be:	50 95       	com	r21
 4c0:	40 95       	com	r20
 4c2:	30 95       	com	r19
 4c4:	21 95       	neg	r18
 4c6:	3f 4f       	sbci	r19, 0xFF	; 255
 4c8:	4f 4f       	sbci	r20, 0xFF	; 255
 4ca:	5f 4f       	sbci	r21, 0xFF	; 255

000004cc <__divmodsi4_exit>:
 4cc:	08 95       	ret

000004ce <__negsi2>:
 4ce:	90 95       	com	r25
 4d0:	80 95       	com	r24
 4d2:	70 95       	com	r23
 4d4:	61 95       	neg	r22
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	8f 4f       	sbci	r24, 0xFF	; 255
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	08 95       	ret

000004de <__mulsidi3>:
 4de:	68 94       	set
 4e0:	00 13       	cpse	r16, r16

000004e2 <__umulsidi3>:
 4e2:	e8 94       	clt
 4e4:	a0 e0       	ldi	r26, 0x00	; 0
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	e7 e7       	ldi	r30, 0x77	; 119
 4ea:	f2 e0       	ldi	r31, 0x02	; 2
 4ec:	1d c0       	rjmp	.+58     	; 0x528 <__prologue_saves__+0x10>
 4ee:	ef ef       	ldi	r30, 0xFF	; 255
 4f0:	e7 f9       	bld	r30, 7
 4f2:	59 01       	movw	r10, r18
 4f4:	6a 01       	movw	r12, r20
 4f6:	5e 23       	and	r21, r30
 4f8:	55 0f       	add	r21, r21
 4fa:	ee 08       	sbc	r14, r14
 4fc:	fe 2c       	mov	r15, r14
 4fe:	87 01       	movw	r16, r14
 500:	9b 01       	movw	r18, r22
 502:	ac 01       	movw	r20, r24
 504:	9e 23       	and	r25, r30
 506:	99 0f       	add	r25, r25
 508:	66 0b       	sbc	r22, r22
 50a:	76 2f       	mov	r23, r22
 50c:	cb 01       	movw	r24, r22
 50e:	5d d0       	rcall	.+186    	; 0x5ca <__muldi3>
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
 514:	ea e0       	ldi	r30, 0x0A	; 10
 516:	24 c0       	rjmp	.+72     	; 0x560 <__epilogue_restores__+0x10>

00000518 <__prologue_saves__>:
 518:	2f 92       	push	r2
 51a:	3f 92       	push	r3
 51c:	4f 92       	push	r4
 51e:	5f 92       	push	r5
 520:	6f 92       	push	r6
 522:	7f 92       	push	r7
 524:	8f 92       	push	r8
 526:	9f 92       	push	r9
 528:	af 92       	push	r10
 52a:	bf 92       	push	r11
 52c:	cf 92       	push	r12
 52e:	df 92       	push	r13
 530:	ef 92       	push	r14
 532:	ff 92       	push	r15
 534:	0f 93       	push	r16
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 540:	ca 1b       	sub	r28, r26
 542:	db 0b       	sbc	r29, r27
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	f8 94       	cli
 548:	de bf       	out	0x3e, r29	; 62
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	cd bf       	out	0x3d, r28	; 61
 54e:	09 94       	ijmp

00000550 <__epilogue_restores__>:
 550:	2a 88       	ldd	r2, Y+18	; 0x12
 552:	39 88       	ldd	r3, Y+17	; 0x11
 554:	48 88       	ldd	r4, Y+16	; 0x10
 556:	5f 84       	ldd	r5, Y+15	; 0x0f
 558:	6e 84       	ldd	r6, Y+14	; 0x0e
 55a:	7d 84       	ldd	r7, Y+13	; 0x0d
 55c:	8c 84       	ldd	r8, Y+12	; 0x0c
 55e:	9b 84       	ldd	r9, Y+11	; 0x0b
 560:	aa 84       	ldd	r10, Y+10	; 0x0a
 562:	b9 84       	ldd	r11, Y+9	; 0x09
 564:	c8 84       	ldd	r12, Y+8	; 0x08
 566:	df 80       	ldd	r13, Y+7	; 0x07
 568:	ee 80       	ldd	r14, Y+6	; 0x06
 56a:	fd 80       	ldd	r15, Y+5	; 0x05
 56c:	0c 81       	ldd	r16, Y+4	; 0x04
 56e:	1b 81       	ldd	r17, Y+3	; 0x03
 570:	aa 81       	ldd	r26, Y+2	; 0x02
 572:	b9 81       	ldd	r27, Y+1	; 0x01
 574:	ce 0f       	add	r28, r30
 576:	d1 1d       	adc	r29, r1
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	de bf       	out	0x3e, r29	; 62
 57e:	0f be       	out	0x3f, r0	; 63
 580:	cd bf       	out	0x3d, r28	; 61
 582:	ed 01       	movw	r28, r26
 584:	08 95       	ret

00000586 <__udivmodsi4>:
 586:	a1 e2       	ldi	r26, 0x21	; 33
 588:	1a 2e       	mov	r1, r26
 58a:	aa 1b       	sub	r26, r26
 58c:	bb 1b       	sub	r27, r27
 58e:	fd 01       	movw	r30, r26
 590:	0d c0       	rjmp	.+26     	; 0x5ac <__udivmodsi4_ep>

00000592 <__udivmodsi4_loop>:
 592:	aa 1f       	adc	r26, r26
 594:	bb 1f       	adc	r27, r27
 596:	ee 1f       	adc	r30, r30
 598:	ff 1f       	adc	r31, r31
 59a:	a2 17       	cp	r26, r18
 59c:	b3 07       	cpc	r27, r19
 59e:	e4 07       	cpc	r30, r20
 5a0:	f5 07       	cpc	r31, r21
 5a2:	20 f0       	brcs	.+8      	; 0x5ac <__udivmodsi4_ep>
 5a4:	a2 1b       	sub	r26, r18
 5a6:	b3 0b       	sbc	r27, r19
 5a8:	e4 0b       	sbc	r30, r20
 5aa:	f5 0b       	sbc	r31, r21

000005ac <__udivmodsi4_ep>:
 5ac:	66 1f       	adc	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	88 1f       	adc	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	1a 94       	dec	r1
 5b6:	69 f7       	brne	.-38     	; 0x592 <__udivmodsi4_loop>
 5b8:	60 95       	com	r22
 5ba:	70 95       	com	r23
 5bc:	80 95       	com	r24
 5be:	90 95       	com	r25
 5c0:	9b 01       	movw	r18, r22
 5c2:	ac 01       	movw	r20, r24
 5c4:	bd 01       	movw	r22, r26
 5c6:	cf 01       	movw	r24, r30
 5c8:	08 95       	ret

000005ca <__muldi3>:
 5ca:	df 93       	push	r29
 5cc:	cf 93       	push	r28
 5ce:	9f 92       	push	r9
 5d0:	a0 e4       	ldi	r26, 0x40	; 64
 5d2:	9a 2e       	mov	r9, r26
 5d4:	00 24       	eor	r0, r0
 5d6:	d0 01       	movw	r26, r0
 5d8:	e0 01       	movw	r28, r0
 5da:	f0 01       	movw	r30, r0
 5dc:	16 95       	lsr	r17
 5de:	07 95       	ror	r16
 5e0:	f7 94       	ror	r15
 5e2:	e7 94       	ror	r14
 5e4:	d7 94       	ror	r13
 5e6:	c7 94       	ror	r12
 5e8:	b7 94       	ror	r11
 5ea:	a7 94       	ror	r10
 5ec:	48 f4       	brcc	.+18     	; 0x600 <__muldi3+0x36>
 5ee:	10 68       	ori	r17, 0x80	; 128
 5f0:	a2 0f       	add	r26, r18
 5f2:	b3 1f       	adc	r27, r19
 5f4:	c4 1f       	adc	r28, r20
 5f6:	d5 1f       	adc	r29, r21
 5f8:	e6 1f       	adc	r30, r22
 5fa:	f7 1f       	adc	r31, r23
 5fc:	08 1e       	adc	r0, r24
 5fe:	19 1e       	adc	r1, r25
 600:	22 0f       	add	r18, r18
 602:	33 1f       	adc	r19, r19
 604:	44 1f       	adc	r20, r20
 606:	55 1f       	adc	r21, r21
 608:	66 1f       	adc	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	9a 94       	dec	r9
 612:	21 f7       	brne	.-56     	; 0x5dc <__muldi3+0x12>
 614:	9d 01       	movw	r18, r26
 616:	ae 01       	movw	r20, r28
 618:	bf 01       	movw	r22, r30
 61a:	c0 01       	movw	r24, r0
 61c:	11 24       	eor	r1, r1
 61e:	9f 90       	pop	r9
 620:	cf 91       	pop	r28
 622:	df 91       	pop	r29
 624:	08 95       	ret

00000626 <_exit>:
 626:	f8 94       	cli

00000628 <__stop_program>:
 628:	ff cf       	rjmp	.-2      	; 0x628 <__stop_program>
